{"ast":null,"code":"var _jsxFileName = \"/Users/jukezispilled/vector/src/pages/Employment.js\";\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport nodemailer from 'nodemailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Employment = () => {\n  const handleSubmit = async (values, actions) => {\n    // Send form data to email here\n    console.log(values);\n    try {\n      let transporter = nodemailer.createTransport({\n        host: \"smtp.example.com\",\n        port: 465,\n        secure: true,\n        // true for 465, false for other ports\n        auth: {\n          user: \"username\",\n          pass: \"password\"\n        }\n      });\n      let info = await transporter.sendMail({\n        from: '\"Employment Form\" <form@example.com>',\n        to: \"recipient@example.com\",\n        subject: \"New Employment Form Submission\",\n        text: JSON.stringify(values),\n        html: `\n          <p>Name: ${values.name}</p>\n          <p>Phone Number: ${values.phone}</p>\n          <p>Address: ${values.address}</p>\n          <p>Email: ${values.email}</p>\n          <p>Work Experience: ${values.workExperience}</p>\n        `\n      });\n      console.log(\"Message sent: %s\", info.messageId);\n      console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(info));\n    } catch (error) {\n      console.log(error);\n    }\n    actions.setSubmitting(false);\n  };\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    phone: Yup.string().required('Phone number is required'),\n    address: Yup.string().required('Address is required'),\n    email: Yup.string().email('Invalid email address').required('Email is required'),\n    workExperience: Yup.string(),\n    resume: Yup.mixed().required('Resume is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: '',\n      phone: '',\n      address: '',\n      email: '',\n      workExperience: '',\n      resume: null\n    },\n    validationSchema: validationSchema,\n    onSubmit: handleSubmit,\n    children: _ref => {\n      let {\n        isSubmitting,\n        setFieldValue\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          name: \"name\",\n          placeholder: \"Name*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"phone\",\n          placeholder: \"Phone Number*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"address\",\n          placeholder: \"Address*\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"email\",\n          placeholder: \"Email*\",\n          type: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"workExperience\",\n          placeholder: \"Work Experience\",\n          component: \"textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          name: \"resume\",\n          component: \"input\",\n          type: \"file\",\n          onChange: event => {\n            setFieldValue(\"resume\", event.currentTarget.files[0]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSubmitting,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_c = Employment;\nexport default Employment;\nvar _c;\n$RefreshReg$(_c, \"Employment\");","map":{"version":3,"names":["React","Formik","Form","Field","Yup","nodemailer","Employment","handleSubmit","values","actions","console","log","transporter","createTransport","host","port","secure","auth","user","pass","info","sendMail","from","to","subject","text","JSON","stringify","html","name","phone","address","email","workExperience","messageId","getTestMessageUrl","error","setSubmitting","validationSchema","object","shape","string","required","resume","mixed","isSubmitting","setFieldValue","event","currentTarget","files"],"sources":["/Users/jukezispilled/vector/src/pages/Employment.js"],"sourcesContent":["import React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport nodemailer from 'nodemailer';\n\nconst Employment = () => {\n  const handleSubmit = async (values, actions) => {\n    // Send form data to email here\n    console.log(values);\n    try {\n      let transporter = nodemailer.createTransport({\n        host: \"smtp.example.com\",\n        port: 465,\n        secure: true, // true for 465, false for other ports\n        auth: {\n          user: \"username\",\n          pass: \"password\"\n        }\n      });\n\n      let info = await transporter.sendMail({\n        from: '\"Employment Form\" <form@example.com>',\n        to: \"recipient@example.com\",\n        subject: \"New Employment Form Submission\",\n        text: JSON.stringify(values),\n        html: `\n          <p>Name: ${values.name}</p>\n          <p>Phone Number: ${values.phone}</p>\n          <p>Address: ${values.address}</p>\n          <p>Email: ${values.email}</p>\n          <p>Work Experience: ${values.workExperience}</p>\n        `\n      });\n\n      console.log(\"Message sent: %s\", info.messageId);\n      console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(info));\n    } catch (error) {\n      console.log(error);\n    }\n    actions.setSubmitting(false);\n  };\n\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Name is required'),\n    phone: Yup.string().required('Phone number is required'),\n    address: Yup.string().required('Address is required'),\n    email: Yup.string().email('Invalid email address').required('Email is required'),\n    workExperience: Yup.string(),\n    resume: Yup.mixed().required('Resume is required')\n  });\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        phone: '',\n        address: '',\n        email: '',\n        workExperience: '',\n        resume: null\n      }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting, setFieldValue }) => (\n        <Form>\n          <Field name=\"name\" placeholder=\"Name*\" />\n          <Field name=\"phone\" placeholder=\"Phone Number*\" />\n          <Field name=\"address\" placeholder=\"Address*\" />\n          <Field name=\"email\" placeholder=\"Email*\" type=\"email\" />\n          <Field name=\"workExperience\" placeholder=\"Work Experience\" component=\"textarea\" />\n          <Field\n            name=\"resume\"\n            component=\"input\"\n            type=\"file\"\n            onChange={event => {\n              setFieldValue(\"resume\", event.currentTarget.files[0]);\n            }}\n            />\n            <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n            </button>\n        </Form>\n        )}\n    </Formik>\n    );\n};\n            \nexport default Employment"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}